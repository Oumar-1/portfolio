/// @param (screen name)
/// takes one param and check it
@mixin media($screen)
  @if ($screen == mobile)
    @media (max-width:767px)
      @content
  @else if ($screen == "min-mobile")
    @media (min-width:768px)
      @content
  @else if ($screen == tablet)
    @media (min-width:768px) and (max-width:993px)
      @content
  @else if ($screen == wide)
    @media (min-width:1200px)
      @content
  @else
    @error "this screen #{$screen} name is invalid"

/// @param(pseudo-element, content, position, dimensions..., parent-positon)
/// create a "pseudo-element" 
@mixin pseudo($e:"before",$c:" ",$pos: absolute,$t: 0,$r: null,$b: null,$l: 0,$p: relative)
  // creating a pseudo class
  &
    position: $p
  &::#{$e}
    content: $c
    position: $pos
    top: $t
    right: $r
    bottom: $b
    left: $l
    @content
@mixin overlay($color,$opacity)
  position: absolute
  width: 100%
  height: 100%
  left: 0
  top: 0
  background-color: rgba($color,$opacity)

// fill animation 
/// );@param(overlay-color,opacity-of-color,underline , underline-color)
/// make a fill animation affect 
@mixin fillAnim($c: #0000,$o: .05, $u: false,$uc: 1 , $pz: 1, $sz : -1)
  &
    z-index: $pz 
  @include pseudo()
    background-color: $c
    height: 100%
    width: 0
    opacity: $o
    transition: width var(--transition-speed,400ms)
    z-index: $sz
    @if $u == true
      border-bottom: 1px solid $uc
  &:hover::before
    width: 100%

// center child element using display of flex

@mixin centerFlx($justify : center, $align : center)
  display: flex
  justify-content: $justify
  align-items: $align

// @mixin to-css-vars($map,$color-name)
//   @each $color,$shades in $map
//     @each $key,$value in $shades
//       --#{$color-name}-#{$color}-#{$key}: #{$value}
@mixin custom-vars($props, $prefix: "")
  @each $prop, $value in $props
    --#{$prefix}-#{$prop}: #{$value} 
